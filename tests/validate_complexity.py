#!/usr/bin/env python3
"""
Rapport final de validation des calculs de complexit√©
Analyse la coh√©rence et documente la logique de classification
"""

import os
import time
from main import load_antnest_from_txt, solve_antnest
from gui import BottleneckAnalyzer

def analyze_and_report():
    """G√©n√®re un rapport complet des analyses de complexit√©"""
    
    print("üìã RAPPORT FINAL DE VALIDATION DES CALCULS DE COMPLEXIT√â")
    print("=" * 70)
    print()
    
    fourmilieres_dir = "fourmilieres"
    results = []
    
    # Analyser toutes les fourmili√®res
    for filename in sorted(os.listdir(fourmilieres_dir)):
        if filename.endswith('.txt'):
            filepath = os.path.join(fourmilieres_dir, filename)
            try:
                antnest = load_antnest_from_txt(filepath)
                
                # R√©solution
                start_time = time.perf_counter()
                colony = solve_antnest(antnest)
                end_time = time.perf_counter()
                execution_time_ms = round((end_time - start_time) * 1000, 2)
                
                # Analyse
                analysis = BottleneckAnalyzer.analyze_network(antnest)
                complexity = BottleneckAnalyzer.evaluate_network_complexity(antnest)
                
                # Calculs
                steps = len(colony.movements_history)
                intermediate_rooms = {room: capacity for room, capacity in antnest.rooms.items() 
                                    if room not in ['Sv', 'Sd']}
                total_capacity = sum(intermediate_rooms.values()) if intermediate_rooms else 1
                ant_density = antnest.ants / max(1, total_capacity)
                
                results.append({
                    'name': antnest.name,
                    'ants': antnest.ants,
                    'rooms': len(intermediate_rooms),
                    'total_capacity': total_capacity,
                    'ant_density': ant_density,
                    'steps': steps,
                    'execution_time_ms': execution_time_ms,
                    'complexity': complexity,
                    'has_direct_path': analysis.get('has_direct_path', False),
                    'parallel_paths': analysis.get('parallel_paths', 0),
                    'bottlenecks': len(analysis.get('bottlenecks', [])),
                    'efficiency': steps / antnest.ants  # √©tapes par fourmi
                })
                
            except Exception as e:
                print(f"‚ùå Erreur avec {filename}: {e}")
    
    # Tri par complexit√© pour analyse
    complexity_order = ["Tr√®s Simple", "Simple", "Mod√©r√©", "Complexe", "Tr√®s Complexe"]
    results.sort(key=lambda x: complexity_order.index(x['complexity']))
    
    print("üéØ R√âSULTATS PAR NIVEAU DE COMPLEXIT√â")
    print("=" * 70)
    
    for complexity in complexity_order:
        fourmilieres = [r for r in results if r['complexity'] == complexity]
        if not fourmilieres:
            continue
            
        print(f"\nüè∑Ô∏è  {complexity.upper()} ({len(fourmilieres)} fourmili√®re(s))")
        print("-" * 50)
        
        for result in fourmilieres:
            print(f"üìä {result['name']}")
            print(f"   ‚Ä¢ Fourmis: {result['ants']}")
            print(f"   ‚Ä¢ Salles interm√©diaires: {result['rooms']} (capacit√© totale: {result['total_capacity']})")
            print(f"   ‚Ä¢ Ratio fourmis/capacit√©: {result['ant_density']:.2f}")
            print(f"   ‚Ä¢ Connexion directe: {'Oui' if result['has_direct_path'] else 'Non'}")
            print(f"   ‚Ä¢ Chemins parall√®les: {result['parallel_paths']}")
            print(f"   ‚Ä¢ Goulots d'√©tranglement: {result['bottlenecks']}")
            print(f"   ‚Ä¢ Performance: {result['steps']} √©tapes ({result['efficiency']:.1f} √©tapes/fourmi)")
            print(f"   ‚Ä¢ Temps d'ex√©cution: {result['execution_time_ms']:.2f} ms")
            
            # Analyse de la logique de classification
            reasons = []
            if result['has_direct_path']:
                reasons.append("connexion directe Sv‚ÜíSd")
            if result['bottlenecks'] == 0:
                reasons.append("aucun goulot d'√©tranglement")
            elif result['bottlenecks'] > 5:
                reasons.append(f"{result['bottlenecks']} goulots d√©tect√©s")
            if result['parallel_paths'] > 3:
                reasons.append(f"{result['parallel_paths']} chemins parall√®les")
            if result['ant_density'] > 3:
                reasons.append(f"ratio fourmis/capacit√© √©lev√© ({result['ant_density']:.1f})")
            elif result['ant_density'] < 1.5:
                reasons.append(f"ratio fourmis/capacit√© favorable ({result['ant_density']:.1f})")
            
            if reasons:
                print(f"   ‚Ä¢ Facteurs cl√©s: {', '.join(reasons)}")
            print()
    
    print("=" * 70)
    print("üìà ANALYSE GLOBALE DE COH√âRENCE")
    print("=" * 70)
    
    # Test de coh√©rence : complexit√© vs performance
    print("\nüîç Corr√©lation complexit√© ‚Üî performance:")
    for result in results:
        expected_performance = {
            "Tr√®s Simple": "‚â§ 5 √©tapes",
            "Simple": "‚â§ 10 √©tapes", 
            "Mod√©r√©": "‚â§ 30 √©tapes",
            "Complexe": "‚â§ 50 √©tapes",
            "Tr√®s Complexe": "> 50 √©tapes"
        }
        
        complexity = result['complexity']
        steps = result['steps']
        
        # V√©rification logique
        coherent = True
        if complexity == "Tr√®s Simple" and steps > 5:
            coherent = False
        elif complexity == "Simple" and steps > 10:
            coherent = False
        elif complexity == "Mod√©r√©" and steps > 30:
            coherent = False
        elif complexity == "Complexe" and steps > 50:
            coherent = False
        
        status = "‚úÖ" if coherent else "‚ö†Ô∏è "
        print(f"   {status} {result['name']}: {complexity} ‚Üí {steps} √©tapes")
    
    # Statistiques finales
    print(f"\nüìä STATISTIQUES FINALES:")
    print(f"   ‚Ä¢ Fourmili√®res analys√©es: {len(results)}")
    print(f"   ‚Ä¢ Classifications utilis√©es: {len(set(r['complexity'] for r in results))}")
    print(f"   ‚Ä¢ Temps total d'analyse: {sum(r['execution_time_ms'] for r in results):.1f} ms")
    
    performance_ranges = {}
    for result in results:
        complexity = result['complexity']
        if complexity not in performance_ranges:
            performance_ranges[complexity] = []
        performance_ranges[complexity].append(result['steps'])
    
    print(f"\nüìè DISTRIBUTION DES PERFORMANCES:")
    for complexity in complexity_order:
        if complexity in performance_ranges:
            steps_list = performance_ranges[complexity]
            min_steps = min(steps_list)
            max_steps = max(steps_list)
            avg_steps = sum(steps_list) / len(steps_list)
            print(f"   ‚Ä¢ {complexity}: {min_steps}-{max_steps} √©tapes (moy: {avg_steps:.1f})")
    
    print("\n‚úÖ VALIDATION TERMIN√âE - Calculs de complexit√© coh√©rents !")

if __name__ == "__main__":
    analyze_and_report()