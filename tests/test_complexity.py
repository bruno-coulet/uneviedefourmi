#!/usr/bin/env python3
"""
Script de test pour v√©rifier la coh√©rence du calcul de complexit√© des fourmili√®res
Analyse toutes les fourmili√®res et compare les r√©sultats avec les donn√©es r√©elles
"""

import os
import time
from main import load_antnest_from_txt, solve_antnest
from gui import BottleneckAnalyzer

def analyze_fourmiliere(filepath):
    """Analyse une fourmili√®re et retourne toutes les m√©triques"""
    try:
        # Charger la fourmili√®re
        antnest = load_antnest_from_txt(filepath)
        
        # R√©soudre avec mesure du temps
        start_time = time.perf_counter()
        colony = solve_antnest(antnest)
        end_time = time.perf_counter()
        
        execution_time_ms = round((end_time - start_time) * 1000, 2)
        
        # Analyse structurelle
        analysis = BottleneckAnalyzer.analyze_network(antnest)
        complexity = BottleneckAnalyzer.evaluate_network_complexity(antnest)
        
        # Extraction des donn√©es r√©elles
        steps = len(colony.movements_history)
        
        # Calcul des capacit√©s r√©elles
        room_capacities = {}
        for room, capacity in antnest.rooms.items():
            if room not in ['Sv', 'Sd']:
                room_capacities[room] = capacity
        
        total_capacity = sum(room_capacities.values()) if room_capacities else 0
        avg_capacity = total_capacity / len(room_capacities) if room_capacities else 0
        
        return {
            'name': antnest.name,
            'filepath': filepath,
            'ants': antnest.ants,
            'rooms': len(antnest.rooms),
            'tunnels': len(antnest.tubes),
            'steps': steps,
            'execution_time_ms': execution_time_ms,
            'complexity': complexity,
            'has_direct_path': analysis.get('has_direct_path', False),
            'parallel_paths': analysis.get('parallel_paths', 0),
            'bottlenecks': len(analysis.get('bottlenecks', [])),
            'room_capacities': room_capacities,
            'total_capacity': total_capacity,
            'avg_capacity': avg_capacity,
            'ant_density': antnest.ants / max(1, total_capacity) if total_capacity > 0 else float('inf'),
            'analysis': analysis
        }
        
    except Exception as e:
        return {
            'name': filepath,
            'error': str(e)
        }

def check_complexity_coherence(data):
    """V√©rifie la coh√©rence du calcul de complexit√©"""
    issues = []
    
    # Test 1: Connexion directe = Tr√®s Simple
    if data['has_direct_path'] and data['complexity'] != "Tr√®s Simple":
        issues.append(f"‚ùå Connexion directe d√©tect√©e mais complexit√© = {data['complexity']}")
    
    # Test 2: 1 √©tape = tr√®s simple (sauf si erreur)
    if data['steps'] == 1 and data['complexity'] not in ["Tr√®s Simple", "Simple"]:
        issues.append(f"‚ùå 1 √©tape seulement mais complexit√© = {data['complexity']}")
    
    # Test 3: Beaucoup d'√©tapes = complexit√© √©lev√©e
    if data['steps'] > 50 and data['complexity'] in ["Tr√®s Simple", "Simple"]:
        issues.append(f"‚ùå {data['steps']} √©tapes mais complexit√© = {data['complexity']}")
    
    # Test 4: Ratio fourmis/capacit√© √©lev√© = complexit√© √©lev√©e
    if data['ant_density'] > 5 and data['complexity'] in ["Tr√®s Simple", "Simple"]:
        issues.append(f"‚ùå Ratio fourmis/capacit√© = {data['ant_density']:.2f} mais complexit√© = {data['complexity']}")
    
    # Test 5: Pas de goulots + capacit√©s suffisantes = pas tr√®s complexe
    if (data['bottlenecks'] == 0 and data['ant_density'] < 2 and 
        data['complexity'] in ["Tr√®s Complexe", "Complexe"]):
        issues.append(f"‚ùå Pas de goulots, ratio faible mais complexit√© = {data['complexity']}")
    
    return issues

def main():
    """Fonction principale de test"""
    print("üîç SCRIPT DE V√âRIFICATION DE COH√âRENCE")
    print("=" * 50)
    
    fourmilieres_dir = "fourmilieres"
    results = []
    
    # Analyser toutes les fourmili√®res
    for filename in sorted(os.listdir(fourmilieres_dir)):
        if filename.endswith('.txt'):
            filepath = os.path.join(fourmilieres_dir, filename)
            print(f"\nüìä Analyse de {filename}...")
            
            data = analyze_fourmiliere(filepath)
            if 'error' in data:
                print(f"‚ùå Erreur: {data['error']}")
                continue
            
            results.append(data)
            
            # Affichage d√©taill√©
            print(f"   Fourmis: {data['ants']}")
            print(f"   Salles: {data['rooms']} (capacit√©s: {data['room_capacities']})")
            print(f"   Total capacit√©: {data['total_capacity']}")
            print(f"   Ratio fourmis/capacit√©: {data['ant_density']:.2f}")
            print(f"   Tunnels: {data['tunnels']}")
            print(f"   Connexion directe: {'Oui' if data['has_direct_path'] else 'Non'}")
            print(f"   Chemins parall√®les: {data['parallel_paths']}")
            print(f"   Goulots: {data['bottlenecks']}")
            print(f"   √âtapes r√©elles: {data['steps']}")
            print(f"   Temps: {data['execution_time_ms']:.2f} ms")
            print(f"   Complexit√© calcul√©e: {data['complexity']}")
            
            # V√©rification de coh√©rence
            issues = check_complexity_coherence(data)
            if issues:
                print(f"   üö® PROBL√àMES D√âTECT√âS:")
                for issue in issues:
                    print(f"      {issue}")
            else:
                print(f"   ‚úÖ Coh√©rence OK")
    
    # R√©sum√© global
    print("\n" + "=" * 50)
    print("üìà R√âSUM√â GLOBAL")
    print("=" * 50)
    
    complexity_counts = {}
    for data in results:
        complexity = data['complexity']
        if complexity not in complexity_counts:
            complexity_counts[complexity] = []
        complexity_counts[complexity].append(data)
    
    for complexity, fourmilieres in complexity_counts.items():
        print(f"\nüè∑Ô∏è  {complexity}: {len(fourmilieres)} fourmili√®re(s)")
        for data in fourmilieres:
            steps_per_ant = data['steps'] / data['ants']
            print(f"   ‚Ä¢ {data['name']}: {data['steps']} √©tapes, {steps_per_ant:.1f} √©tapes/fourmi")
    
    # Tests de coh√©rence globale
    print(f"\nüîç TESTS DE COH√âRENCE GLOBALE:")
    
    # Test: Les "Tr√®s Simple" doivent avoir le moins d'√©tapes
    tres_simples = [d for d in results if d['complexity'] == "Tr√®s Simple"]
    tres_complexes = [d for d in results if d['complexity'] == "Tr√®s Complexe"]
    
    if tres_simples and tres_complexes:
        min_steps_simple = min(d['steps'] for d in tres_simples)
        max_steps_complex = max(d['steps'] for d in tres_complexes)
        
        if min_steps_simple > max_steps_complex:
            print("‚ùå Incoh√©rence: 'Tr√®s Simple' a plus d'√©tapes que 'Tr√®s Complexe'")
        else:
            print("‚úÖ Coh√©rence: 'Tr√®s Simple' ‚â§ √©tapes ‚â§ 'Tr√®s Complexe'")
    
    # Test: Corr√©lation temps vs complexit√©
    sorted_by_time = sorted(results, key=lambda x: x['execution_time_ms'])
    sorted_by_complexity = sorted(results, key=lambda x: ['Tr√®s Simple', 'Simple', 'Mod√©r√©', 'Complexe', 'Tr√®s Complexe'].index(x['complexity']))
    
    print(f"\n‚è±Ô∏è  Ordre par temps: {[d['name'] for d in sorted_by_time]}")
    print(f"üè∑Ô∏è  Ordre par complexit√©: {[d['name'] for d in sorted_by_complexity]}")
    
    print(f"\nüéØ Test termin√© ! Analys√© {len(results)} fourmili√®res.")

if __name__ == "__main__":
    main()